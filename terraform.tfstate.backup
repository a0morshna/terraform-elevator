{
  "version": 4,
  "terraform_version": "1.0.11",
  "serial": 864,
  "lineage": "52dd0a6a-cb05-a45b-1c59-53dc28f5e7e9",
  "outputs": {
    "jenkins-prod_public_ip": {
      "value": "34.118.119.227",
      "type": "string"
    },
    "jenkins-test_public_ip": {
      "value": "34.116.193.108",
      "type": "string"
    }
  },
  "resources": [
    {
      "mode": "data",
      "type": "template_file",
      "name": "script-prod",
      "provider": "provider[\"registry.terraform.io/hashicorp/template\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "df895da0307609b4ab119c1c8eabe584e4da3ea4721be338ef1fda27a2942899",
            "rendered": "#!/bin/bash\n\n# install git\n\nsudo apt-get update\nsudo apt install git\n\nmkdir -p ansible-cicd/cronjob\ncd ansible-cicd/cronjob\n\n# add cron job \n\ncat \u003c\u003cEOF \u003e cron.sh\n#!/bin/sh\n\ncd /ansible-cicd\nsudo git init\nsudo git pull https://github.com/a0morshna/ansible-cicd.git\n\ncd /ansible-cicd\nansible-playbook playbook.yml\n\nEOF\n\n\n# add file where will be stored logs\ncat \u003c\u003cEOF \u003e job.log\n---------logs--------\n\nEOF\n\n\n# enabled cron loging\nsudo chmod 777 /etc/rsyslog.d/50-default.conf \nsudo cat \u003c\u003cEOF \u003e /etc/rsyslog.d/50-default.conf \ncron.*             /var/log/cron.log\n\nEOF\nsudo systemctl restart rsyslog\n\n\n# add permissions for user\necho 'alex0872m ALL=(ALL:ALL) NOPASSWD:ALL' | sudo EDITOR='tee -a' visudo\n\n\n# add cron job to crontab\ncd ..\nsudo chmod +x /ansible-cicd/cronjob/cron.sh\n(crontab -l 2\u003e/dev/null; echo \"*/5 * * * * /ansible-cicd/cronjob/cron.sh  \u003e\u003e /ansible-cicd/cronjob/job.log 2\u003e\u00261\") | crontab -\n\n\nsudo systemctl restart cron\n\n\ncd /ansible-cicd\n\ncat \u003c\u003cEOF \u003e playbook.yml\n---\n- name: Install needed packages\n  become: yes\n  hosts:  localhost\n\n\n  tasks:\n\n\n  - name: Install python\n    raw: apt-get update \u0026\u0026 apt-get install -y python3\n\n\n  - name: Install  pip\n    apt:\n      name:\n        - python3-pip\n\n\n  - name: Install some python3 global deps\n    pip:\n      name:\n        - packaging\n        - appdirs\n      state: latest\n      executable: pip3\n\n\n  - name: Install python3 dependencies\n    pip:\n      name:\n        - wheel\n        - setuptools\n      executable: pip3\n      state: latest\n\n\n\n- name: File checking\n  become: yes\n  hosts: localhost\n\n\n  vars:\n    jenkins_host:  http://34.116.193.108:8080/job/cicd/lastStableBuild/api/json?tree=artifacts%5BrelativePath%5D\n    jenkins_user: Iq9sPDd6\n    jenkins_password: UEh4fWvWzt5Y\n\n\n  tasks:\n\n\n    - name: Make dir for all txt/json files\n      file:\n        path: /ansible-cicd/files\n        state: directory\n\n\n    - name: Get url response\n      uri:\n        url: \"{{ jenkins_host }}\"\n        user: \"{{ jenkins_user }}\"\n        password: \"{{ jenkins_password }}\"\n        method: GET\n        force_basic_auth: yes\n      register: pl_list_artifacts\n\n\n    - name: Write all data in json\n      copy:\n        content=\"{{ pl_list_artifacts }}\"\n        dest=/ansible-cicd/files/pl_list_artifacts.json\n\n\n    - name: Get path and filename\n      shell: |\n        grep -oE \"[0-9]+/+[a-zA-Z0-9_.-]+.whl\" /ansible-cicd/files/pl_list_artifacts.json | awk '!a[$0]++' \u003e /ansible-cicd/files/pl_path.txt\n\n\n    - name: Get whl filename\n      shell: |\n        grep -oE \"[a-zA-Z0-9_.-]+.whl\" /ansible-cicd/files/pl_path.txt | awk '!a[$0]++' \u003e /ansible-cicd/files/pl_filename.txt\n\n\n    - name: Check if any .whl file exist\n      shell: |\n        if ls /ansible-cicd/*.whl 1\u003e/dev/null 2\u003e\u00261\n        then\n          echo \"Exist\"\n        fi\n      register: file_result\n      \n\n    - name: Debug\n      debug:\n        var: file_result\n\n\n    - block:\n\n        - name: File doesn't exist\n          command: ansible-playbook playbook2.yml\n\n      when: file_result.stdout != \"Exist\"\n\n\n    - block:\n\n        - name: File exist\n          command: ansible-playbook playbook1.yml\n\n      when: file_result.stdout == \"Exist\"\n\nEOF\n\nsudo chmod 777 playbook.yml\n\n\ncat \u003c\u003cEOF \u003e playbook1.yml\n---\n- name: Register files\n  become: yes\n  hosts: localhost\n\n\n  vars:\n\n    jenkins_host:  http://34.116.193.108:8080/job/cicd/lastStableBuild/api/json?tree=artifacts%5BrelativePath%5D\n    jenkins_user: Iq9sPDd6\n    jenkins_password: UEh4fWvWzt5Y\n    whl_test_dest: /ansible-cicd/test/\n    whl_dest: /ansible-cicd/\n\n\n  tasks:\n\n\n    - name: Make test dir\n      file:\n        path: /ansible-cicd/test\n        state: directory\n\n\n    - name: Get url response\n      uri:\n        url: \"{{ jenkins_host }}\"\n        user: \"{{ jenkins_user }}\"\n        password: \"{{ jenkins_password }}\"\n        dest: \"{{ whl_test_dest }}\"\n        method: GET\n        force_basic_auth: yes\n      register: list_test_artifacts\n\n\n    - name: Write response data in json\n      copy:\n        content=\"{{ list_test_artifacts }}\"\n        dest=/ansible-cicd/files/pl1_list_artifacts.json\n\n\n    - name: Get path and filename\n      shell: |\n        grep -oE \"[0-9]+/+[a-zA-Z0-9_.-]+.whl\" /ansible-cicd/files/pl1_list_artifacts.json | awk '!a[$0]++' \u003e /ansible-cicd/files/pl1_path_test.txt\n\n\n    - name: Get whl filename\n      shell: |\n        grep -oE \"[a-zA-Z0-9_.-]+.whl\" /ansible-cicd/files/pl1_path_test.txt | awk '!a[$0]++' \u003e /ansible-cicd/files/pl1_filename_test.txt\n\n\n\n- name: Comapre exist file and test file\n  hosts: localhost\n  become: yes\n\n\n  vars :\n\n    jenkins_wheel:  http://34.116.193.108:8080/job/cicd/lastSuccessfulBuild/\n    jenkins_user: Iq9sPDd6\n    jenkins_password: UEh4fWvWzt5Y\n    whl_test_dest: /ansible-cicd/test/\n    whl_dest: /ansible-cicd/\n\n\n  tasks:\n\n\n    - name: Get response\n      uri:\n        url: \"{{ jenkins_wheel }}/artifact/{{  lookup('file', 'pl1_path_test.txt') }}\"\n        user: \"{{ jenkins_user }}\"\n        password: \"{{ jenkins_password }}\"\n        dest: \"{{ whl_test_dest }}\"\n        method: GET\n        force_basic_auth: yes\n        return_content: yes\n\n\n    - name: Install wheel package\n      shell: |\n        cd /ansible-cicd/test\n        pip3 install \"{{ lookup('file', 'pl1_filename_test.txt') }}\"\n\n\n    - name: Register test filename\n      stat:\n        path: \"{{ whl_test_dest }}\"\n      register: test_file\n\n\n    - name: Reqister existing filename\n      stat:\n        path: \"{{ whl_dest }}\"\n      register: exist_file\n\n\n    - name: Compare files if they equal or not\n      shell: |\n        if [ $exist_file -ne $test_file  ]\n        then\n          echo \"False\"\n        else\n          echo \"True\"\n        fi\n      register: result\n\n\n    - name: Debug\n      debug:\n        var: result\n\n\n    - block:\n\n        - name: Delete previous version\n          shell: |\n            cd /ansible-cicd\n            sudo rm *.whl\n\n\n        - name: If files not equal\n          shell: |\n            cd /ansible-cicd/test\n            mv \"{{ lookup('file', 'pl1_filename_test.txt') }}\" /ansible-cicd\n            cd /ansible-cicd\n            sudo rm -r test\n\n      when: result.stdout == \"False\"\n\n\n    - block:\n\n        - name: If files equal\n          shell: |\n            cd /ansible-cicd\n            sudo rm -r test\n\n      when: result.stdout == \"True\"\n\nEOF\n\nsudo chmod 777 playbook1.yml\n\n\ncat \u003c\u003cEOF \u003e playbook2.yml\n---\n\n- name: Get filename\n  become: yes\n  hosts: localhost\n\n  vars:\n    jenkins_host:  http://34.116.193.108:8080/job/cicd/lastStableBuild/api/json?tree=artifacts%5BrelativePath%5D\n    jenkins_user: Iq9sPDd6\n    jenkins_password: UEh4fWvWzt5Y\n    whl_dest: /ansible-cicd/files/\n\n  tasks:\n\n    - name: Make files dir\n      file:\n        path: /ansible-cicd/files\n        state: directory\n\n\n    - name: Get response data\n      uri:\n        url: \"{{ jenkins_host }}\"\n        user: \"{{ jenkins_user }}\"\n        password: \"{{ jenkins_password }}\"\n        method: GET\n        force_basic_auth: yes\n      register: list_artifact\n\n\n    - name: Write response data in json\n      copy:\n        content=\"{{ list_artifact }}\"\n        dest=/ansible-cicd/files/list_artifacts.json\n\n\n    - name: Get path and filename\n      shell: |\n        grep -oE \"[0-9]+/+[a-zA-Z0-9_.-]+.whl\" /ansible-cicd/files/list_artifacts.json | awk '!a[$0]++' \u003e /ansible-cicd/files/path.txt\n\n\n    - name: Get whl filename\n      shell: |\n        grep -oE \"[a-zA-Z0-9_.-]+.whl\" /ansible-cicd/files/path.txt | awk '!a[$0]++' \u003e /ansible-cicd/files/filename.txt\n\n\n\n- name: Instal new version\n  become: yes\n  hosts: localhost\n\n  vars:\n    jenkins_wheel: http://34.116.193.108:8080/job/cicd/lastSuccessfulBuild/\n    jenkins_user: Iq9sPDd6\n    jenkins_password: UEh4fWvWzt5Y\n    whl_dest: /ansible-cicd/\n\n  tasks:\n\n    - name: Get data\n      uri:\n        url: \"{{ jenkins_wheel }}/artifact/{{  lookup('file', 'path.txt') }}\"\n        user: \"{{ jenkins_user }}\"\n        password: \"{{ jenkins_password }}\"\n        dest: \"{{ whl_dest }}\"\n        method: GET\n        force_basic_auth: yes\n        return_content: yes\n\n\n    - name: Install wheel package\n      command: pip3 install \"{{ lookup('file', 'filename.txt') }}\"\n\n\nEOF\n\n#install ansible\n\nsudo chmod +x playbook2.yml\n\nsudo apt-get update -y\nsudo apt-get install --no-install-recommends -y software-properties-common -y \nsudo apt-add-repository ppa:ansible/ansible -y\n\nsudo apt-get update -y\nsudo apt-get install -y ansible\n\n",
            "template": "#!/bin/bash\n\n# install git\n\nsudo apt-get update\nsudo apt install git\n\nmkdir -p ansible-cicd/cronjob\ncd ansible-cicd/cronjob\n\n# add cron job \n\ncat \u003c\u003cEOF \u003e cron.sh\n#!/bin/sh\n\ncd /ansible-cicd\nsudo git init\nsudo git pull https://github.com/a0morshna/ansible-cicd.git\n\ncd /ansible-cicd\nansible-playbook playbook.yml\n\nEOF\n\n\n# add file where will be stored logs\ncat \u003c\u003cEOF \u003e job.log\n---------logs--------\n\nEOF\n\n\n# enabled cron loging\nsudo chmod 777 /etc/rsyslog.d/50-default.conf \nsudo cat \u003c\u003cEOF \u003e /etc/rsyslog.d/50-default.conf \ncron.*             /var/log/cron.log\n\nEOF\nsudo systemctl restart rsyslog\n\n\n# add permissions for user\necho 'alex0872m ALL=(ALL:ALL) NOPASSWD:ALL' | sudo EDITOR='tee -a' visudo\n\n\n# add cron job to crontab\ncd ..\nsudo chmod +x /ansible-cicd/cronjob/cron.sh\n(crontab -l 2\u003e/dev/null; echo \"*/5 * * * * /ansible-cicd/cronjob/cron.sh  \u003e\u003e /ansible-cicd/cronjob/job.log 2\u003e\u00261\") | crontab -\n\n\nsudo systemctl restart cron\n\n\ncd /ansible-cicd\n\ncat \u003c\u003cEOF \u003e playbook.yml\n---\n- name: Install needed packages\n  become: yes\n  hosts:  localhost\n\n\n  tasks:\n\n\n  - name: Install python\n    raw: apt-get update \u0026\u0026 apt-get install -y python3\n\n\n  - name: Install  pip\n    apt:\n      name:\n        - python3-pip\n\n\n  - name: Install some python3 global deps\n    pip:\n      name:\n        - packaging\n        - appdirs\n      state: latest\n      executable: pip3\n\n\n  - name: Install python3 dependencies\n    pip:\n      name:\n        - wheel\n        - setuptools\n      executable: pip3\n      state: latest\n\n\n\n- name: File checking\n  become: yes\n  hosts: localhost\n\n\n  vars:\n    jenkins_host:  http://${jenkins-test_public_ip}:8080/job/cicd/lastStableBuild/api/json?tree=artifacts%5BrelativePath%5D\n    jenkins_user: ${login}\n    jenkins_password: ${password}\n\n\n  tasks:\n\n\n    - name: Make dir for all txt/json files\n      file:\n        path: /ansible-cicd/files\n        state: directory\n\n\n    - name: Get url response\n      uri:\n        url: \"{{ jenkins_host }}\"\n        user: \"{{ jenkins_user }}\"\n        password: \"{{ jenkins_password }}\"\n        method: GET\n        force_basic_auth: yes\n      register: pl_list_artifacts\n\n\n    - name: Write all data in json\n      copy:\n        content=\"{{ pl_list_artifacts }}\"\n        dest=/ansible-cicd/files/pl_list_artifacts.json\n\n\n    - name: Get path and filename\n      shell: |\n        grep -oE \"[0-9]+/+[a-zA-Z0-9_.-]+.whl\" /ansible-cicd/files/pl_list_artifacts.json | awk '!a[$0]++' \u003e /ansible-cicd/files/pl_path.txt\n\n\n    - name: Get whl filename\n      shell: |\n        grep -oE \"[a-zA-Z0-9_.-]+.whl\" /ansible-cicd/files/pl_path.txt | awk '!a[$0]++' \u003e /ansible-cicd/files/pl_filename.txt\n\n\n    - name: Check if any .whl file exist\n      shell: |\n        if ls /ansible-cicd/*.whl 1\u003e/dev/null 2\u003e\u00261\n        then\n          echo \"Exist\"\n        fi\n      register: file_result\n      \n\n    - name: Debug\n      debug:\n        var: file_result\n\n\n    - block:\n\n        - name: File doesn't exist\n          command: ansible-playbook playbook2.yml\n\n      when: file_result.stdout != \"Exist\"\n\n\n    - block:\n\n        - name: File exist\n          command: ansible-playbook playbook1.yml\n\n      when: file_result.stdout == \"Exist\"\n\nEOF\n\nsudo chmod 777 playbook.yml\n\n\ncat \u003c\u003cEOF \u003e playbook1.yml\n---\n- name: Register files\n  become: yes\n  hosts: localhost\n\n\n  vars:\n\n    jenkins_host:  http://${jenkins-test_public_ip}:8080/job/cicd/lastStableBuild/api/json?tree=artifacts%5BrelativePath%5D\n    jenkins_user: ${login}\n    jenkins_password: ${password}\n    whl_test_dest: /ansible-cicd/test/\n    whl_dest: /ansible-cicd/\n\n\n  tasks:\n\n\n    - name: Make test dir\n      file:\n        path: /ansible-cicd/test\n        state: directory\n\n\n    - name: Get url response\n      uri:\n        url: \"{{ jenkins_host }}\"\n        user: \"{{ jenkins_user }}\"\n        password: \"{{ jenkins_password }}\"\n        dest: \"{{ whl_test_dest }}\"\n        method: GET\n        force_basic_auth: yes\n      register: list_test_artifacts\n\n\n    - name: Write response data in json\n      copy:\n        content=\"{{ list_test_artifacts }}\"\n        dest=/ansible-cicd/files/pl1_list_artifacts.json\n\n\n    - name: Get path and filename\n      shell: |\n        grep -oE \"[0-9]+/+[a-zA-Z0-9_.-]+.whl\" /ansible-cicd/files/pl1_list_artifacts.json | awk '!a[$0]++' \u003e /ansible-cicd/files/pl1_path_test.txt\n\n\n    - name: Get whl filename\n      shell: |\n        grep -oE \"[a-zA-Z0-9_.-]+.whl\" /ansible-cicd/files/pl1_path_test.txt | awk '!a[$0]++' \u003e /ansible-cicd/files/pl1_filename_test.txt\n\n\n\n- name: Comapre exist file and test file\n  hosts: localhost\n  become: yes\n\n\n  vars :\n\n    jenkins_wheel:  http://${jenkins-test_public_ip}:8080/job/cicd/lastSuccessfulBuild/\n    jenkins_user: ${login}\n    jenkins_password: ${password}\n    whl_test_dest: /ansible-cicd/test/\n    whl_dest: /ansible-cicd/\n\n\n  tasks:\n\n\n    - name: Get response\n      uri:\n        url: \"{{ jenkins_wheel }}/artifact/{{  lookup('file', 'pl1_path_test.txt') }}\"\n        user: \"{{ jenkins_user }}\"\n        password: \"{{ jenkins_password }}\"\n        dest: \"{{ whl_test_dest }}\"\n        method: GET\n        force_basic_auth: yes\n        return_content: yes\n\n\n    - name: Install wheel package\n      shell: |\n        cd /ansible-cicd/test\n        pip3 install \"{{ lookup('file', 'pl1_filename_test.txt') }}\"\n\n\n    - name: Register test filename\n      stat:\n        path: \"{{ whl_test_dest }}\"\n      register: test_file\n\n\n    - name: Reqister existing filename\n      stat:\n        path: \"{{ whl_dest }}\"\n      register: exist_file\n\n\n    - name: Compare files if they equal or not\n      shell: |\n        if [ $exist_file -ne $test_file  ]\n        then\n          echo \"False\"\n        else\n          echo \"True\"\n        fi\n      register: result\n\n\n    - name: Debug\n      debug:\n        var: result\n\n\n    - block:\n\n        - name: Delete previous version\n          shell: |\n            cd /ansible-cicd\n            sudo rm *.whl\n\n\n        - name: If files not equal\n          shell: |\n            cd /ansible-cicd/test\n            mv \"{{ lookup('file', 'pl1_filename_test.txt') }}\" /ansible-cicd\n            cd /ansible-cicd\n            sudo rm -r test\n\n      when: result.stdout == \"False\"\n\n\n    - block:\n\n        - name: If files equal\n          shell: |\n            cd /ansible-cicd\n            sudo rm -r test\n\n      when: result.stdout == \"True\"\n\nEOF\n\nsudo chmod 777 playbook1.yml\n\n\ncat \u003c\u003cEOF \u003e playbook2.yml\n---\n\n- name: Get filename\n  become: yes\n  hosts: localhost\n\n  vars:\n    jenkins_host:  http://${jenkins-test_public_ip}:8080/job/cicd/lastStableBuild/api/json?tree=artifacts%5BrelativePath%5D\n    jenkins_user: ${login}\n    jenkins_password: ${password}\n    whl_dest: /ansible-cicd/files/\n\n  tasks:\n\n    - name: Make files dir\n      file:\n        path: /ansible-cicd/files\n        state: directory\n\n\n    - name: Get response data\n      uri:\n        url: \"{{ jenkins_host }}\"\n        user: \"{{ jenkins_user }}\"\n        password: \"{{ jenkins_password }}\"\n        method: GET\n        force_basic_auth: yes\n      register: list_artifact\n\n\n    - name: Write response data in json\n      copy:\n        content=\"{{ list_artifact }}\"\n        dest=/ansible-cicd/files/list_artifacts.json\n\n\n    - name: Get path and filename\n      shell: |\n        grep -oE \"[0-9]+/+[a-zA-Z0-9_.-]+.whl\" /ansible-cicd/files/list_artifacts.json | awk '!a[$0]++' \u003e /ansible-cicd/files/path.txt\n\n\n    - name: Get whl filename\n      shell: |\n        grep -oE \"[a-zA-Z0-9_.-]+.whl\" /ansible-cicd/files/path.txt | awk '!a[$0]++' \u003e /ansible-cicd/files/filename.txt\n\n\n\n- name: Instal new version\n  become: yes\n  hosts: localhost\n\n  vars:\n    jenkins_wheel: http://${jenkins-test_public_ip}:8080/job/cicd/lastSuccessfulBuild/\n    jenkins_user: ${login}\n    jenkins_password: ${password}\n    whl_dest: /ansible-cicd/\n\n  tasks:\n\n    - name: Get data\n      uri:\n        url: \"{{ jenkins_wheel }}/artifact/{{  lookup('file', 'path.txt') }}\"\n        user: \"{{ jenkins_user }}\"\n        password: \"{{ jenkins_password }}\"\n        dest: \"{{ whl_dest }}\"\n        method: GET\n        force_basic_auth: yes\n        return_content: yes\n\n\n    - name: Install wheel package\n      command: pip3 install \"{{ lookup('file', 'filename.txt') }}\"\n\n\nEOF\n\n#install ansible\n\nsudo chmod +x playbook2.yml\n\nsudo apt-get update -y\nsudo apt-get install --no-install-recommends -y software-properties-common -y \nsudo apt-add-repository ppa:ansible/ansible -y\n\nsudo apt-get update -y\nsudo apt-get install -y ansible\n\n",
            "vars": {
              "jenkins-test_public_ip": "34.116.193.108",
              "login": "Iq9sPDd6",
              "password": "UEh4fWvWzt5Y"
            }
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "vars"
              },
              {
                "type": "index",
                "value": {
                  "value": "password",
                  "type": "string"
                }
              }
            ]
          ]
        }
      ]
    },
    {
      "mode": "data",
      "type": "template_file",
      "name": "script-test",
      "provider": "provider[\"registry.terraform.io/hashicorp/template\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "99311169bfc6738973b96aeb9c003580e2491719412e2f67f12313fef17649a9",
            "rendered": "#!/bin/bash\n\n# install jenkins\n\nsudo apt update -y\nsudo apt-get install openssh-server -y\nsudo apt install openjdk-8-jdk -y\n\nwget -qO - https://pkg.jenkins.io/debian-stable/jenkins.io.key | sudo apt-key add -\nsudo sh -c 'echo deb http://pkg.jenkins-ci.org/debian binary/ \u003e /etc/apt/sources.list.d/jenkins.list'\n\nsudo apt-get update -y\nsudo apt-get install -y jenkins\nsudo systemctl enable jenkins\nsudo systemctl start jenkins\n\nmkdir jenkins\ncd jenkins\n\ncat \u003c\u003cEOF \u003e jenkins_user.sh\n#!/bin/bash\n\nfunction createJenkinsUser {\n\n\tsudo apt-get update -y\n\t\n\techo \"Creating jenkins user\"\n\n\tsudo useradd -m -d /var/lib/jenkins -s /bin/bash -G sudo jenkins \n\n\techo \"making jenkins as sudo user\"\n\n\tsudo usermod -aG sudo jenkins\n\n\tnopasswdEntry=`cat /etc/sudoers | grep 'jenkins' | wc -l`\n\n\tif [ $nopasswdEntry -eq 0 ]\n    then\n\t    echo \"Making nopasswd entry in sudoers file\"\n\t    echo 'jenkins  ALL=(ALL) NOPASSWD:ALL' \u003e\u003e /etc/sudoers  \n\tfi\n}\ncreateJenkinsUser\n\nEOF\n\nsudo /bin/bash jenkins_user.sh\n\n\ncd /var/lib/jenkins\nmkdir init.groovy.d\ncd init.groovy.d\n\n\ncat \u003c\u003cEOF \u003e 01-admin-user.groovy\n\n/*\n * Create an admin user.\n */\nimport jenkins.model.*\nimport hudson.security.*\n\nprintln \"--\u003e creating admin user\"\n\n//def adminUsername = System.getenv(Iq9sPDd6)\n//def adminPassword = System.getenv(UEh4fWvWzt5Y)\n\ndef adminUsername = \"Iq9sPDd6\"\ndef adminPassword = \"UEh4fWvWzt5Y\"\n\nassert adminPassword != null : \"No ADMIN_USERNAME env var provided, but required\"\nassert adminPassword != null : \"No ADMIN_PASSWORD env var provided, but required\"\n\ndef hudsonRealm = new HudsonPrivateSecurityRealm(false)\nhudsonRealm.createAccount(adminUsername, adminPassword)\nJenkins.instance.setSecurityRealm(hudsonRealm)\ndef strategy = new FullControlOnceLoggedInAuthorizationStrategy()\nstrategy.setAllowAnonymousRead(false)\nJenkins.instance.setAuthorizationStrategy(strategy)\n\nJenkins.instance.save()\n\nEOF\n\nsudo systemctl restart jenkins\n\n\ncat \u003c\u003cEOF \u003e 02-plugins.groovy\n\nimport jenkins.*\nimport hudson.*\nimport com.cloudbees.plugins.credentials.*\nimport com.cloudbees.plugins.credentials.common.*\nimport com.cloudbees.plugins.credentials.domains.*\nimport com.cloudbees.jenkins.plugins.sshcredentials.impl.*\nimport hudson.plugins.sshslaves.*;\nimport hudson.model.*\nimport jenkins.model.*\nimport hudson.security.*\n\nfinal List\u003cString\u003e REQUIRED_PLUGINS = [\n        \"workflow-aggregator\",\n        \"ws-cleanup\",\n        \"ant\",\n        \"antisamy-markup-formatter\",\n        \"authorize-project\",\n        \"build-timeout\",\n        \"cloudbees-folder\",\n        \"configuration-as-code\",\n        \"credentials-binding\",\n        \"email-ext\",\n        \"git\",\n        \"github-branch-source\",\n        \"gradle\",\n        \"ldap\",\n        \"mailer\",\n        \"matrix-auth\",\n        \"pam-auth\",\n        \"pipeline-github-lib\",\n        \"pipeline-stage-view\",\n        \"ssh-slaves\",\n        \"timestamper\",\n        \"workflow-aggregator\",\n        \"ws-cleanup\",\n]\n\nif (Jenkins.instance.pluginManager.plugins.collect {\n  it.shortName\n}.intersect(REQUIRED_PLUGINS).size() != REQUIRED_PLUGINS.size()) {\n  REQUIRED_PLUGINS.collect {\n    Jenkins.instance.updateCenter.getPlugin(it).deploy()\n  }.each {\n    it.get()\n  }\n  Jenkins.instance.restart()\n  println 'Run this script again after restarting to create the jobs!'\n  throw new RestartRequiredException(null)\n}\n\nprintln \"Plugins were installed successfully\"\n\nEOF\n\n\nsudo systemctl restart jenkins",
            "template": "#!/bin/bash\n\n# install jenkins\n\nsudo apt update -y\nsudo apt-get install openssh-server -y\nsudo apt install openjdk-8-jdk -y\n\nwget -qO - https://pkg.jenkins.io/debian-stable/jenkins.io.key | sudo apt-key add -\nsudo sh -c 'echo deb http://pkg.jenkins-ci.org/debian binary/ \u003e /etc/apt/sources.list.d/jenkins.list'\n\nsudo apt-get update -y\nsudo apt-get install -y jenkins\nsudo systemctl enable jenkins\nsudo systemctl start jenkins\n\nmkdir jenkins\ncd jenkins\n\ncat \u003c\u003cEOF \u003e jenkins_user.sh\n#!/bin/bash\n\nfunction createJenkinsUser {\n\n\tsudo apt-get update -y\n\t\n\techo \"Creating jenkins user\"\n\n\tsudo useradd -m -d /var/lib/jenkins -s /bin/bash -G sudo jenkins \n\n\techo \"making jenkins as sudo user\"\n\n\tsudo usermod -aG sudo jenkins\n\n\tnopasswdEntry=`cat /etc/sudoers | grep 'jenkins' | wc -l`\n\n\tif [ $nopasswdEntry -eq 0 ]\n    then\n\t    echo \"Making nopasswd entry in sudoers file\"\n\t    echo 'jenkins  ALL=(ALL) NOPASSWD:ALL' \u003e\u003e /etc/sudoers  \n\tfi\n}\ncreateJenkinsUser\n\nEOF\n\nsudo /bin/bash jenkins_user.sh\n\n\ncd /var/lib/jenkins\nmkdir init.groovy.d\ncd init.groovy.d\n\n\ncat \u003c\u003cEOF \u003e 01-admin-user.groovy\n\n/*\n * Create an admin user.\n */\nimport jenkins.model.*\nimport hudson.security.*\n\nprintln \"--\u003e creating admin user\"\n\n//def adminUsername = System.getenv(${login})\n//def adminPassword = System.getenv(${password})\n\ndef adminUsername = \"${login}\"\ndef adminPassword = \"${password}\"\n\nassert adminPassword != null : \"No ADMIN_USERNAME env var provided, but required\"\nassert adminPassword != null : \"No ADMIN_PASSWORD env var provided, but required\"\n\ndef hudsonRealm = new HudsonPrivateSecurityRealm(false)\nhudsonRealm.createAccount(adminUsername, adminPassword)\nJenkins.instance.setSecurityRealm(hudsonRealm)\ndef strategy = new FullControlOnceLoggedInAuthorizationStrategy()\nstrategy.setAllowAnonymousRead(false)\nJenkins.instance.setAuthorizationStrategy(strategy)\n\nJenkins.instance.save()\n\nEOF\n\nsudo systemctl restart jenkins\n\n\ncat \u003c\u003cEOF \u003e 02-plugins.groovy\n\nimport jenkins.*\nimport hudson.*\nimport com.cloudbees.plugins.credentials.*\nimport com.cloudbees.plugins.credentials.common.*\nimport com.cloudbees.plugins.credentials.domains.*\nimport com.cloudbees.jenkins.plugins.sshcredentials.impl.*\nimport hudson.plugins.sshslaves.*;\nimport hudson.model.*\nimport jenkins.model.*\nimport hudson.security.*\n\nfinal List\u003cString\u003e REQUIRED_PLUGINS = [\n        \"workflow-aggregator\",\n        \"ws-cleanup\",\n        \"ant\",\n        \"antisamy-markup-formatter\",\n        \"authorize-project\",\n        \"build-timeout\",\n        \"cloudbees-folder\",\n        \"configuration-as-code\",\n        \"credentials-binding\",\n        \"email-ext\",\n        \"git\",\n        \"github-branch-source\",\n        \"gradle\",\n        \"ldap\",\n        \"mailer\",\n        \"matrix-auth\",\n        \"pam-auth\",\n        \"pipeline-github-lib\",\n        \"pipeline-stage-view\",\n        \"ssh-slaves\",\n        \"timestamper\",\n        \"workflow-aggregator\",\n        \"ws-cleanup\",\n]\n\nif (Jenkins.instance.pluginManager.plugins.collect {\n  it.shortName\n}.intersect(REQUIRED_PLUGINS).size() != REQUIRED_PLUGINS.size()) {\n  REQUIRED_PLUGINS.collect {\n    Jenkins.instance.updateCenter.getPlugin(it).deploy()\n  }.each {\n    it.get()\n  }\n  Jenkins.instance.restart()\n  println 'Run this script again after restarting to create the jobs!'\n  throw new RestartRequiredException(null)\n}\n\nprintln \"Plugins were installed successfully\"\n\nEOF\n\n\nsudo systemctl restart jenkins",
            "vars": {
              "login": "Iq9sPDd6",
              "password": "UEh4fWvWzt5Y"
            }
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "vars"
              },
              {
                "type": "index",
                "value": {
                  "value": "password",
                  "type": "string"
                }
              }
            ]
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_compute_instance",
      "name": "jenkins-prod",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 6,
          "attributes": {
            "advanced_machine_features": [],
            "allow_stopping_for_update": null,
            "attached_disk": [],
            "boot_disk": [
              {
                "auto_delete": true,
                "device_name": "persistent-disk-0",
                "disk_encryption_key_raw": "",
                "disk_encryption_key_sha256": "",
                "initialize_params": [
                  {
                    "image": "https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/images/ubuntu-1804-bionic-v20211115",
                    "labels": {},
                    "size": 10,
                    "type": "pd-standard"
                  }
                ],
                "kms_key_self_link": "",
                "mode": "READ_WRITE",
                "source": "https://www.googleapis.com/compute/v1/projects/cicd-task/zones/europe-central2-a/disks/jenkins-prod"
              }
            ],
            "can_ip_forward": false,
            "confidential_instance_config": [],
            "cpu_platform": "Intel Broadwell",
            "current_status": "RUNNING",
            "deletion_protection": false,
            "description": "",
            "desired_status": null,
            "enable_display": false,
            "guest_accelerator": [],
            "hostname": "",
            "id": "projects/cicd-task/zones/europe-central2-a/instances/jenkins-prod",
            "instance_id": "6555670382526099099",
            "label_fingerprint": "42WmSpB8rSM=",
            "labels": null,
            "machine_type": "e2-standard-2",
            "metadata": null,
            "metadata_fingerprint": "4E30OSIPpu0=",
            "metadata_startup_script": "#!/bin/bash\n\n# install git\n\nsudo apt-get update\nsudo apt install git\n\nmkdir -p ansible-cicd/cronjob\ncd ansible-cicd/cronjob\n\n# add cron job \n\ncat \u003c\u003cEOF \u003e cron.sh\n#!/bin/sh\n\ncd /ansible-cicd\nsudo git init\nsudo git pull https://github.com/a0morshna/ansible-cicd.git\n\ncd /ansible-cicd\nansible-playbook playbook.yml\n\nEOF\n\n\n# add file where will be stored logs\ncat \u003c\u003cEOF \u003e job.log\n---------logs--------\n\nEOF\n\n\n# enabled cron loging\nsudo chmod 777 /etc/rsyslog.d/50-default.conf \nsudo cat \u003c\u003cEOF \u003e /etc/rsyslog.d/50-default.conf \ncron.*             /var/log/cron.log\n\nEOF\nsudo systemctl restart rsyslog\n\n\n# add permissions for user\necho 'alex0872m ALL=(ALL:ALL) NOPASSWD:ALL' | sudo EDITOR='tee -a' visudo\n\n\n# add cron job to crontab\ncd ..\nsudo chmod +x /ansible-cicd/cronjob/cron.sh\n(crontab -l 2\u003e/dev/null; echo \"*/5 * * * * /ansible-cicd/cronjob/cron.sh  \u003e\u003e /ansible-cicd/cronjob/job.log 2\u003e\u00261\") | crontab -\n\n\nsudo systemctl restart cron\n\n\ncd /ansible-cicd\n\ncat \u003c\u003cEOF \u003e playbook.yml\n---\n- name: Install needed packages\n  become: yes\n  hosts:  localhost\n\n\n  tasks:\n\n\n  - name: Install python\n    raw: apt-get update \u0026\u0026 apt-get install -y python3\n\n\n  - name: Install  pip\n    apt:\n      name:\n        - python3-pip\n\n\n  - name: Install some python3 global deps\n    pip:\n      name:\n        - packaging\n        - appdirs\n      state: latest\n      executable: pip3\n\n\n  - name: Install python3 dependencies\n    pip:\n      name:\n        - wheel\n        - setuptools\n      executable: pip3\n      state: latest\n\n\n\n- name: File checking\n  become: yes\n  hosts: localhost\n\n\n  vars:\n    jenkins_host:  http://34.116.193.108:8080/job/cicd/lastStableBuild/api/json?tree=artifacts%5BrelativePath%5D\n    jenkins_user: Iq9sPDd6\n    jenkins_password: UEh4fWvWzt5Y\n\n\n  tasks:\n\n\n    - name: Make dir for all txt/json files\n      file:\n        path: /ansible-cicd/files\n        state: directory\n\n\n    - name: Get url response\n      uri:\n        url: \"{{ jenkins_host }}\"\n        user: \"{{ jenkins_user }}\"\n        password: \"{{ jenkins_password }}\"\n        method: GET\n        force_basic_auth: yes\n      register: pl_list_artifacts\n\n\n    - name: Write all data in json\n      copy:\n        content=\"{{ pl_list_artifacts }}\"\n        dest=/ansible-cicd/files/pl_list_artifacts.json\n\n\n    - name: Get path and filename\n      shell: |\n        grep -oE \"[0-9]+/+[a-zA-Z0-9_.-]+.whl\" /ansible-cicd/files/pl_list_artifacts.json | awk '!a[$0]++' \u003e /ansible-cicd/files/pl_path.txt\n\n\n    - name: Get whl filename\n      shell: |\n        grep -oE \"[a-zA-Z0-9_.-]+.whl\" /ansible-cicd/files/pl_path.txt | awk '!a[$0]++' \u003e /ansible-cicd/files/pl_filename.txt\n\n\n    - name: Check if any .whl file exist\n      shell: |\n        if ls /ansible-cicd/*.whl 1\u003e/dev/null 2\u003e\u00261\n        then\n          echo \"Exist\"\n        fi\n      register: file_result\n      \n\n    - name: Debug\n      debug:\n        var: file_result\n\n\n    - block:\n\n        - name: File doesn't exist\n          command: ansible-playbook playbook2.yml\n\n      when: file_result.stdout != \"Exist\"\n\n\n    - block:\n\n        - name: File exist\n          command: ansible-playbook playbook1.yml\n\n      when: file_result.stdout == \"Exist\"\n\nEOF\n\nsudo chmod 777 playbook.yml\n\n\ncat \u003c\u003cEOF \u003e playbook1.yml\n---\n- name: Register files\n  become: yes\n  hosts: localhost\n\n\n  vars:\n\n    jenkins_host:  http://34.116.193.108:8080/job/cicd/lastStableBuild/api/json?tree=artifacts%5BrelativePath%5D\n    jenkins_user: Iq9sPDd6\n    jenkins_password: UEh4fWvWzt5Y\n    whl_test_dest: /ansible-cicd/test/\n    whl_dest: /ansible-cicd/\n\n\n  tasks:\n\n\n    - name: Make test dir\n      file:\n        path: /ansible-cicd/test\n        state: directory\n\n\n    - name: Get url response\n      uri:\n        url: \"{{ jenkins_host }}\"\n        user: \"{{ jenkins_user }}\"\n        password: \"{{ jenkins_password }}\"\n        dest: \"{{ whl_test_dest }}\"\n        method: GET\n        force_basic_auth: yes\n      register: list_test_artifacts\n\n\n    - name: Write response data in json\n      copy:\n        content=\"{{ list_test_artifacts }}\"\n        dest=/ansible-cicd/files/pl1_list_artifacts.json\n\n\n    - name: Get path and filename\n      shell: |\n        grep -oE \"[0-9]+/+[a-zA-Z0-9_.-]+.whl\" /ansible-cicd/files/pl1_list_artifacts.json | awk '!a[$0]++' \u003e /ansible-cicd/files/pl1_path_test.txt\n\n\n    - name: Get whl filename\n      shell: |\n        grep -oE \"[a-zA-Z0-9_.-]+.whl\" /ansible-cicd/files/pl1_path_test.txt | awk '!a[$0]++' \u003e /ansible-cicd/files/pl1_filename_test.txt\n\n\n\n- name: Comapre exist file and test file\n  hosts: localhost\n  become: yes\n\n\n  vars :\n\n    jenkins_wheel:  http://34.116.193.108:8080/job/cicd/lastSuccessfulBuild/\n    jenkins_user: Iq9sPDd6\n    jenkins_password: UEh4fWvWzt5Y\n    whl_test_dest: /ansible-cicd/test/\n    whl_dest: /ansible-cicd/\n\n\n  tasks:\n\n\n    - name: Get response\n      uri:\n        url: \"{{ jenkins_wheel }}/artifact/{{  lookup('file', 'pl1_path_test.txt') }}\"\n        user: \"{{ jenkins_user }}\"\n        password: \"{{ jenkins_password }}\"\n        dest: \"{{ whl_test_dest }}\"\n        method: GET\n        force_basic_auth: yes\n        return_content: yes\n\n\n    - name: Install wheel package\n      shell: |\n        cd /ansible-cicd/test\n        pip3 install \"{{ lookup('file', 'pl1_filename_test.txt') }}\"\n\n\n    - name: Register test filename\n      stat:\n        path: \"{{ whl_test_dest }}\"\n      register: test_file\n\n\n    - name: Reqister existing filename\n      stat:\n        path: \"{{ whl_dest }}\"\n      register: exist_file\n\n\n    - name: Compare files if they equal or not\n      shell: |\n        if [ $exist_file -ne $test_file  ]\n        then\n          echo \"False\"\n        else\n          echo \"True\"\n        fi\n      register: result\n\n\n    - name: Debug\n      debug:\n        var: result\n\n\n    - block:\n\n        - name: Delete previous version\n          shell: |\n            cd /ansible-cicd\n            sudo rm *.whl\n\n\n        - name: If files not equal\n          shell: |\n            cd /ansible-cicd/test\n            mv \"{{ lookup('file', 'pl1_filename_test.txt') }}\" /ansible-cicd\n            cd /ansible-cicd\n            sudo rm -r test\n\n      when: result.stdout == \"False\"\n\n\n    - block:\n\n        - name: If files equal\n          shell: |\n            cd /ansible-cicd\n            sudo rm -r test\n\n      when: result.stdout == \"True\"\n\nEOF\n\nsudo chmod 777 playbook1.yml\n\n\ncat \u003c\u003cEOF \u003e playbook2.yml\n---\n\n- name: Get filename\n  become: yes\n  hosts: localhost\n\n  vars:\n    jenkins_host:  http://34.116.193.108:8080/job/cicd/lastStableBuild/api/json?tree=artifacts%5BrelativePath%5D\n    jenkins_user: Iq9sPDd6\n    jenkins_password: UEh4fWvWzt5Y\n    whl_dest: /ansible-cicd/files/\n\n  tasks:\n\n    - name: Make files dir\n      file:\n        path: /ansible-cicd/files\n        state: directory\n\n\n    - name: Get response data\n      uri:\n        url: \"{{ jenkins_host }}\"\n        user: \"{{ jenkins_user }}\"\n        password: \"{{ jenkins_password }}\"\n        method: GET\n        force_basic_auth: yes\n      register: list_artifact\n\n\n    - name: Write response data in json\n      copy:\n        content=\"{{ list_artifact }}\"\n        dest=/ansible-cicd/files/list_artifacts.json\n\n\n    - name: Get path and filename\n      shell: |\n        grep -oE \"[0-9]+/+[a-zA-Z0-9_.-]+.whl\" /ansible-cicd/files/list_artifacts.json | awk '!a[$0]++' \u003e /ansible-cicd/files/path.txt\n\n\n    - name: Get whl filename\n      shell: |\n        grep -oE \"[a-zA-Z0-9_.-]+.whl\" /ansible-cicd/files/path.txt | awk '!a[$0]++' \u003e /ansible-cicd/files/filename.txt\n\n\n\n- name: Instal new version\n  become: yes\n  hosts: localhost\n\n  vars:\n    jenkins_wheel: http://34.116.193.108:8080/job/cicd/lastSuccessfulBuild/\n    jenkins_user: Iq9sPDd6\n    jenkins_password: UEh4fWvWzt5Y\n    whl_dest: /ansible-cicd/\n\n  tasks:\n\n    - name: Get data\n      uri:\n        url: \"{{ jenkins_wheel }}/artifact/{{  lookup('file', 'path.txt') }}\"\n        user: \"{{ jenkins_user }}\"\n        password: \"{{ jenkins_password }}\"\n        dest: \"{{ whl_dest }}\"\n        method: GET\n        force_basic_auth: yes\n        return_content: yes\n\n\n    - name: Install wheel package\n      command: pip3 install \"{{ lookup('file', 'filename.txt') }}\"\n\n\nEOF\n\n#install ansible\n\nsudo chmod +x playbook2.yml\n\nsudo apt-get update -y\nsudo apt-get install --no-install-recommends -y software-properties-common -y \nsudo apt-add-repository ppa:ansible/ansible -y\n\nsudo apt-get update -y\nsudo apt-get install -y ansible\n\n",
            "min_cpu_platform": "",
            "name": "jenkins-prod",
            "network_interface": [
              {
                "access_config": [
                  {
                    "nat_ip": "34.118.119.227",
                    "network_tier": "PREMIUM",
                    "public_ptr_domain_name": ""
                  }
                ],
                "alias_ip_range": [],
                "name": "nic0",
                "network": "https://www.googleapis.com/compute/v1/projects/cicd-task/global/networks/default",
                "network_ip": "10.186.0.27",
                "nic_type": "",
                "subnetwork": "https://www.googleapis.com/compute/v1/projects/cicd-task/regions/europe-central2/subnetworks/default",
                "subnetwork_project": "cicd-task"
              }
            ],
            "project": "cicd-task",
            "reservation_affinity": [],
            "resource_policies": null,
            "scheduling": [
              {
                "automatic_restart": true,
                "min_node_cpus": 0,
                "node_affinities": [],
                "on_host_maintenance": "MIGRATE",
                "preemptible": false
              }
            ],
            "scratch_disk": [],
            "self_link": "https://www.googleapis.com/compute/v1/projects/cicd-task/zones/europe-central2-a/instances/jenkins-prod",
            "service_account": [],
            "shielded_instance_config": [
              {
                "enable_integrity_monitoring": true,
                "enable_secure_boot": false,
                "enable_vtpm": true
              }
            ],
            "tags": null,
            "tags_fingerprint": "42WmSpB8rSM=",
            "timeouts": null,
            "zone": "europe-central2-a"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjEyMDAwMDAwMDAwMDAsInVwZGF0ZSI6MTIwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiNiJ9",
          "dependencies": [
            "data.template_file.script-prod"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_compute_instance",
      "name": "jenkins-test",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 6,
          "attributes": {
            "advanced_machine_features": [],
            "allow_stopping_for_update": null,
            "attached_disk": [],
            "boot_disk": [
              {
                "auto_delete": true,
                "device_name": "persistent-disk-0",
                "disk_encryption_key_raw": "",
                "disk_encryption_key_sha256": "",
                "initialize_params": [
                  {
                    "image": "https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/images/ubuntu-1804-bionic-v20211103",
                    "labels": {},
                    "size": 10,
                    "type": "pd-standard"
                  }
                ],
                "kms_key_self_link": "",
                "mode": "READ_WRITE",
                "source": "https://www.googleapis.com/compute/v1/projects/cicd-task/zones/europe-central2-a/disks/jenkins-test"
              }
            ],
            "can_ip_forward": false,
            "confidential_instance_config": [],
            "cpu_platform": "Intel Broadwell",
            "current_status": "RUNNING",
            "deletion_protection": false,
            "description": "",
            "desired_status": null,
            "enable_display": false,
            "guest_accelerator": [],
            "hostname": "",
            "id": "projects/cicd-task/zones/europe-central2-a/instances/jenkins-test",
            "instance_id": "8168965390029065986",
            "label_fingerprint": "42WmSpB8rSM=",
            "labels": {},
            "machine_type": "e2-standard-2",
            "metadata": {},
            "metadata_fingerprint": "OtKiJlV82Yw=",
            "metadata_startup_script": "#!/bin/bash\n\n# install jenkins\n\nsudo apt update -y\nsudo apt-get install openssh-server -y\nsudo apt install openjdk-8-jdk -y\n\nwget -qO - https://pkg.jenkins.io/debian-stable/jenkins.io.key | sudo apt-key add -\nsudo sh -c 'echo deb http://pkg.jenkins-ci.org/debian binary/ \u003e /etc/apt/sources.list.d/jenkins.list'\n\nsudo apt-get update -y\nsudo apt-get install -y jenkins\nsudo systemctl enable jenkins\nsudo systemctl start jenkins\n\nmkdir jenkins\ncd jenkins\n\ncat \u003c\u003cEOF \u003e jenkins_user.sh\n#!/bin/bash\n\nfunction createJenkinsUser {\n\n\tsudo apt-get update -y\n\t\n\techo \"Creating jenkins user\"\n\n\tsudo useradd -m -d /var/lib/jenkins -s /bin/bash -G sudo jenkins \n\n\techo \"making jenkins as sudo user\"\n\n\tsudo usermod -aG sudo jenkins\n\n\tnopasswdEntry=`cat /etc/sudoers | grep 'jenkins' | wc -l`\n\n\tif [ $nopasswdEntry -eq 0 ]\n    then\n\t    echo \"Making nopasswd entry in sudoers file\"\n\t    echo 'jenkins  ALL=(ALL) NOPASSWD:ALL' \u003e\u003e /etc/sudoers  \n\tfi\n}\ncreateJenkinsUser\n\nEOF\n\nsudo /bin/bash jenkins_user.sh\n\n\ncd /var/lib/jenkins\nmkdir init.groovy.d\ncd init.groovy.d\n\n\ncat \u003c\u003cEOF \u003e 01-admin-user.groovy\n\n/*\n * Create an admin user.\n */\nimport jenkins.model.*\nimport hudson.security.*\n\nprintln \"--\u003e creating admin user\"\n\n//def adminUsername = System.getenv(Iq9sPDd6)\n//def adminPassword = System.getenv(UEh4fWvWzt5Y)\n\ndef adminUsername = \"Iq9sPDd6\"\ndef adminPassword = \"UEh4fWvWzt5Y\"\n\nassert adminPassword != null : \"No ADMIN_USERNAME env var provided, but required\"\nassert adminPassword != null : \"No ADMIN_PASSWORD env var provided, but required\"\n\ndef hudsonRealm = new HudsonPrivateSecurityRealm(false)\nhudsonRealm.createAccount(adminUsername, adminPassword)\nJenkins.instance.setSecurityRealm(hudsonRealm)\ndef strategy = new FullControlOnceLoggedInAuthorizationStrategy()\nstrategy.setAllowAnonymousRead(false)\nJenkins.instance.setAuthorizationStrategy(strategy)\n\nJenkins.instance.save()\n\nEOF\n\nsudo systemctl restart jenkins\n\n\ncat \u003c\u003cEOF \u003e 02-plugins.groovy\n\nimport jenkins.*\nimport hudson.*\nimport com.cloudbees.plugins.credentials.*\nimport com.cloudbees.plugins.credentials.common.*\nimport com.cloudbees.plugins.credentials.domains.*\nimport com.cloudbees.jenkins.plugins.sshcredentials.impl.*\nimport hudson.plugins.sshslaves.*;\nimport hudson.model.*\nimport jenkins.model.*\nimport hudson.security.*\n\nfinal List\u003cString\u003e REQUIRED_PLUGINS = [\n        \"workflow-aggregator\",\n        \"ws-cleanup\",\n        \"ant\",\n        \"antisamy-markup-formatter\",\n        \"authorize-project\",\n        \"build-timeout\",\n        \"cloudbees-folder\",\n        \"configuration-as-code\",\n        \"credentials-binding\",\n        \"email-ext\",\n        \"git\",\n        \"github-branch-source\",\n        \"gradle\",\n        \"ldap\",\n        \"mailer\",\n        \"matrix-auth\",\n        \"pam-auth\",\n        \"pipeline-github-lib\",\n        \"pipeline-stage-view\",\n        \"ssh-slaves\",\n        \"timestamper\",\n        \"workflow-aggregator\",\n        \"ws-cleanup\",\n]\n\nif (Jenkins.instance.pluginManager.plugins.collect {\n  it.shortName\n}.intersect(REQUIRED_PLUGINS).size() != REQUIRED_PLUGINS.size()) {\n  REQUIRED_PLUGINS.collect {\n    Jenkins.instance.updateCenter.getPlugin(it).deploy()\n  }.each {\n    it.get()\n  }\n  Jenkins.instance.restart()\n  println 'Run this script again after restarting to create the jobs!'\n  throw new RestartRequiredException(null)\n}\n\nprintln \"Plugins were installed successfully\"\n\nEOF\n\n\nsudo systemctl restart jenkins",
            "min_cpu_platform": "",
            "name": "jenkins-test",
            "network_interface": [
              {
                "access_config": [
                  {
                    "nat_ip": "34.116.193.108",
                    "network_tier": "PREMIUM",
                    "public_ptr_domain_name": ""
                  }
                ],
                "alias_ip_range": [],
                "name": "nic0",
                "network": "https://www.googleapis.com/compute/v1/projects/cicd-task/global/networks/default",
                "network_ip": "10.186.15.215",
                "nic_type": "",
                "subnetwork": "https://www.googleapis.com/compute/v1/projects/cicd-task/regions/europe-central2/subnetworks/default",
                "subnetwork_project": "cicd-task"
              }
            ],
            "project": "cicd-task",
            "reservation_affinity": [],
            "resource_policies": [],
            "scheduling": [
              {
                "automatic_restart": true,
                "min_node_cpus": 0,
                "node_affinities": [],
                "on_host_maintenance": "MIGRATE",
                "preemptible": false
              }
            ],
            "scratch_disk": [],
            "self_link": "https://www.googleapis.com/compute/v1/projects/cicd-task/zones/europe-central2-a/instances/jenkins-test",
            "service_account": [],
            "shielded_instance_config": [
              {
                "enable_integrity_monitoring": true,
                "enable_secure_boot": false,
                "enable_vtpm": true
              }
            ],
            "tags": [],
            "tags_fingerprint": "42WmSpB8rSM=",
            "timeouts": null,
            "zone": "europe-central2-a"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjEyMDAwMDAwMDAwMDAsInVwZGF0ZSI6MTIwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiNiJ9",
          "dependencies": [
            "data.template_file.script-test",
            "random_id.login",
            "random_password.password"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "random_id",
      "name": "login",
      "provider": "provider[\"registry.terraform.io/hashicorp/random\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "b64_std": "Iq9sPDd6",
            "b64_url": "Iq9sPDd6",
            "byte_length": 6,
            "dec": "38136830506874",
            "hex": "22af6c3c377a",
            "id": "Iq9sPDd6",
            "keepers": null,
            "prefix": null
          },
          "sensitive_attributes": [],
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "random_password",
      "name": "password",
      "provider": "provider[\"registry.terraform.io/hashicorp/random\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "none",
            "keepers": null,
            "length": 12,
            "lower": true,
            "min_lower": 0,
            "min_numeric": 0,
            "min_special": 0,
            "min_upper": 0,
            "number": true,
            "override_special": null,
            "result": "UEh4fWvWzt5Y",
            "special": false,
            "upper": true
          },
          "sensitive_attributes": [],
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "module": "module.firewall-rule",
      "mode": "managed",
      "type": "google_compute_firewall",
      "name": "allow-http",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "allow": [
              {
                "ports": [
                  "8080",
                  "22"
                ],
                "protocol": "tcp"
              }
            ],
            "creation_timestamp": "2021-11-08T06:19:23.511-08:00",
            "deny": [],
            "description": "",
            "destination_ranges": [],
            "direction": "INGRESS",
            "disabled": false,
            "enable_logging": null,
            "id": "projects/cicd-task/global/firewalls/allow-http",
            "log_config": [],
            "name": "allow-http",
            "network": "https://www.googleapis.com/compute/v1/projects/cicd-task/global/networks/default",
            "priority": 1000,
            "project": "cicd-task",
            "self_link": "https://www.googleapis.com/compute/v1/projects/cicd-task/global/firewalls/allow-http",
            "source_ranges": [
              "0.0.0.0/0"
            ],
            "source_service_accounts": null,
            "source_tags": null,
            "target_service_accounts": null,
            "target_tags": null,
            "timeouts": null
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoyNDAwMDAwMDAwMDAsImRlbGV0ZSI6MjQwMDAwMDAwMDAwLCJ1cGRhdGUiOjI0MDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiMSJ9"
        }
      ]
    }
  ]
}
